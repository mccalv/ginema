/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.ginema.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SensitiveDataHolder2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SensitiveDataHolder2\",\"namespace\":\"com.ginema.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"domain\",\"type\":[\"int\",\"null\"]},{\"name\":\"dates\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"DateEntry\",\"fields\":[{\"name\":\"n\",\"type\":[\"string\",\"null\"]},{\"name\":\"v\",\"type\":\"long\"}]}}},{\"name\":\"strings\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"StringEntry\",\"fields\":[{\"name\":\"n\",\"type\":[\"string\",\"null\"]},{\"name\":\"v\",\"type\":\"string\"}]}}},{\"name\":\"booleans\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"BooleanEntry\",\"fields\":[{\"name\":\"n\",\"type\":[\"string\",\"null\"]},{\"name\":\"v\",\"type\":\"string\"}]}}},{\"name\":\"longs\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"LongEntry\",\"fields\":[{\"name\":\"n\",\"type\":[\"string\",\"null\"]},{\"name\":\"v\",\"type\":\"long\"}]}}},{\"name\":\"floats\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"FloatEntry\",\"fields\":[{\"name\":\"n\",\"type\":[\"string\",\"null\"]},{\"name\":\"v\",\"type\":\"float\"}]}}},{\"name\":\"doubles\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"DoubleEntry\",\"fields\":[{\"name\":\"n\",\"type\":[\"string\",\"null\"]},{\"name\":\"v\",\"type\":\"double\"}]}}},{\"name\":\"bytes\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"record\",\"name\":\"BytesEntry\",\"fields\":[{\"name\":\"n\",\"type\":[\"string\",\"null\"]},{\"name\":\"v\",\"type\":\"bytes\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.Integer domain;
  @Deprecated public java.util.Map<java.lang.CharSequence,com.ginema.avro.DateEntry> dates;
  @Deprecated public java.util.Map<java.lang.CharSequence,com.ginema.avro.StringEntry> strings;
  @Deprecated public java.util.Map<java.lang.CharSequence,com.ginema.avro.BooleanEntry> booleans;
  @Deprecated public java.util.Map<java.lang.CharSequence,com.ginema.avro.LongEntry> longs;
  @Deprecated public java.util.Map<java.lang.CharSequence,com.ginema.avro.FloatEntry> floats;
  @Deprecated public java.util.Map<java.lang.CharSequence,com.ginema.avro.DoubleEntry> doubles;
  @Deprecated public java.util.Map<java.lang.CharSequence,com.ginema.avro.BytesEntry> bytes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public SensitiveDataHolder2() {}

  /**
   * All-args constructor.
   */
  public SensitiveDataHolder2(java.lang.CharSequence id, java.lang.Integer domain, java.util.Map<java.lang.CharSequence,com.ginema.avro.DateEntry> dates, java.util.Map<java.lang.CharSequence,com.ginema.avro.StringEntry> strings, java.util.Map<java.lang.CharSequence,com.ginema.avro.BooleanEntry> booleans, java.util.Map<java.lang.CharSequence,com.ginema.avro.LongEntry> longs, java.util.Map<java.lang.CharSequence,com.ginema.avro.FloatEntry> floats, java.util.Map<java.lang.CharSequence,com.ginema.avro.DoubleEntry> doubles, java.util.Map<java.lang.CharSequence,com.ginema.avro.BytesEntry> bytes) {
    this.id = id;
    this.domain = domain;
    this.dates = dates;
    this.strings = strings;
    this.booleans = booleans;
    this.longs = longs;
    this.floats = floats;
    this.doubles = doubles;
    this.bytes = bytes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return domain;
    case 2: return dates;
    case 3: return strings;
    case 4: return booleans;
    case 5: return longs;
    case 6: return floats;
    case 7: return doubles;
    case 8: return bytes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: domain = (java.lang.Integer)value$; break;
    case 2: dates = (java.util.Map<java.lang.CharSequence,com.ginema.avro.DateEntry>)value$; break;
    case 3: strings = (java.util.Map<java.lang.CharSequence,com.ginema.avro.StringEntry>)value$; break;
    case 4: booleans = (java.util.Map<java.lang.CharSequence,com.ginema.avro.BooleanEntry>)value$; break;
    case 5: longs = (java.util.Map<java.lang.CharSequence,com.ginema.avro.LongEntry>)value$; break;
    case 6: floats = (java.util.Map<java.lang.CharSequence,com.ginema.avro.FloatEntry>)value$; break;
    case 7: doubles = (java.util.Map<java.lang.CharSequence,com.ginema.avro.DoubleEntry>)value$; break;
    case 8: bytes = (java.util.Map<java.lang.CharSequence,com.ginema.avro.BytesEntry>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'domain' field.
   */
  public java.lang.Integer getDomain() {
    return domain;
  }

  /**
   * Sets the value of the 'domain' field.
   * @param value the value to set.
   */
  public void setDomain(java.lang.Integer value) {
    this.domain = value;
  }

  /**
   * Gets the value of the 'dates' field.
   */
  public java.util.Map<java.lang.CharSequence,com.ginema.avro.DateEntry> getDates() {
    return dates;
  }

  /**
   * Sets the value of the 'dates' field.
   * @param value the value to set.
   */
  public void setDates(java.util.Map<java.lang.CharSequence,com.ginema.avro.DateEntry> value) {
    this.dates = value;
  }

  /**
   * Gets the value of the 'strings' field.
   */
  public java.util.Map<java.lang.CharSequence,com.ginema.avro.StringEntry> getStrings() {
    return strings;
  }

  /**
   * Sets the value of the 'strings' field.
   * @param value the value to set.
   */
  public void setStrings(java.util.Map<java.lang.CharSequence,com.ginema.avro.StringEntry> value) {
    this.strings = value;
  }

  /**
   * Gets the value of the 'booleans' field.
   */
  public java.util.Map<java.lang.CharSequence,com.ginema.avro.BooleanEntry> getBooleans() {
    return booleans;
  }

  /**
   * Sets the value of the 'booleans' field.
   * @param value the value to set.
   */
  public void setBooleans(java.util.Map<java.lang.CharSequence,com.ginema.avro.BooleanEntry> value) {
    this.booleans = value;
  }

  /**
   * Gets the value of the 'longs' field.
   */
  public java.util.Map<java.lang.CharSequence,com.ginema.avro.LongEntry> getLongs() {
    return longs;
  }

  /**
   * Sets the value of the 'longs' field.
   * @param value the value to set.
   */
  public void setLongs(java.util.Map<java.lang.CharSequence,com.ginema.avro.LongEntry> value) {
    this.longs = value;
  }

  /**
   * Gets the value of the 'floats' field.
   */
  public java.util.Map<java.lang.CharSequence,com.ginema.avro.FloatEntry> getFloats() {
    return floats;
  }

  /**
   * Sets the value of the 'floats' field.
   * @param value the value to set.
   */
  public void setFloats(java.util.Map<java.lang.CharSequence,com.ginema.avro.FloatEntry> value) {
    this.floats = value;
  }

  /**
   * Gets the value of the 'doubles' field.
   */
  public java.util.Map<java.lang.CharSequence,com.ginema.avro.DoubleEntry> getDoubles() {
    return doubles;
  }

  /**
   * Sets the value of the 'doubles' field.
   * @param value the value to set.
   */
  public void setDoubles(java.util.Map<java.lang.CharSequence,com.ginema.avro.DoubleEntry> value) {
    this.doubles = value;
  }

  /**
   * Gets the value of the 'bytes' field.
   */
  public java.util.Map<java.lang.CharSequence,com.ginema.avro.BytesEntry> getBytes() {
    return bytes;
  }

  /**
   * Sets the value of the 'bytes' field.
   * @param value the value to set.
   */
  public void setBytes(java.util.Map<java.lang.CharSequence,com.ginema.avro.BytesEntry> value) {
    this.bytes = value;
  }

  /** Creates a new SensitiveDataHolder2 RecordBuilder */
  public static com.ginema.avro.SensitiveDataHolder2.Builder newBuilder() {
    return new com.ginema.avro.SensitiveDataHolder2.Builder();
  }
  
  /** Creates a new SensitiveDataHolder2 RecordBuilder by copying an existing Builder */
  public static com.ginema.avro.SensitiveDataHolder2.Builder newBuilder(com.ginema.avro.SensitiveDataHolder2.Builder other) {
    return new com.ginema.avro.SensitiveDataHolder2.Builder(other);
  }
  
  /** Creates a new SensitiveDataHolder2 RecordBuilder by copying an existing SensitiveDataHolder2 instance */
  public static com.ginema.avro.SensitiveDataHolder2.Builder newBuilder(com.ginema.avro.SensitiveDataHolder2 other) {
    return new com.ginema.avro.SensitiveDataHolder2.Builder(other);
  }
  
  /**
   * RecordBuilder for SensitiveDataHolder2 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SensitiveDataHolder2>
    implements org.apache.avro.data.RecordBuilder<SensitiveDataHolder2> {

    private java.lang.CharSequence id;
    private java.lang.Integer domain;
    private java.util.Map<java.lang.CharSequence,com.ginema.avro.DateEntry> dates;
    private java.util.Map<java.lang.CharSequence,com.ginema.avro.StringEntry> strings;
    private java.util.Map<java.lang.CharSequence,com.ginema.avro.BooleanEntry> booleans;
    private java.util.Map<java.lang.CharSequence,com.ginema.avro.LongEntry> longs;
    private java.util.Map<java.lang.CharSequence,com.ginema.avro.FloatEntry> floats;
    private java.util.Map<java.lang.CharSequence,com.ginema.avro.DoubleEntry> doubles;
    private java.util.Map<java.lang.CharSequence,com.ginema.avro.BytesEntry> bytes;

    /** Creates a new Builder */
    private Builder() {
      super(com.ginema.avro.SensitiveDataHolder2.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.ginema.avro.SensitiveDataHolder2.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.domain)) {
        this.domain = data().deepCopy(fields()[1].schema(), other.domain);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dates)) {
        this.dates = data().deepCopy(fields()[2].schema(), other.dates);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.strings)) {
        this.strings = data().deepCopy(fields()[3].schema(), other.strings);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.booleans)) {
        this.booleans = data().deepCopy(fields()[4].schema(), other.booleans);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.longs)) {
        this.longs = data().deepCopy(fields()[5].schema(), other.longs);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.floats)) {
        this.floats = data().deepCopy(fields()[6].schema(), other.floats);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.doubles)) {
        this.doubles = data().deepCopy(fields()[7].schema(), other.doubles);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.bytes)) {
        this.bytes = data().deepCopy(fields()[8].schema(), other.bytes);
        fieldSetFlags()[8] = true;
      }
    }
    
    /** Creates a Builder by copying an existing SensitiveDataHolder2 instance */
    private Builder(com.ginema.avro.SensitiveDataHolder2 other) {
            super(com.ginema.avro.SensitiveDataHolder2.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.domain)) {
        this.domain = data().deepCopy(fields()[1].schema(), other.domain);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dates)) {
        this.dates = data().deepCopy(fields()[2].schema(), other.dates);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.strings)) {
        this.strings = data().deepCopy(fields()[3].schema(), other.strings);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.booleans)) {
        this.booleans = data().deepCopy(fields()[4].schema(), other.booleans);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.longs)) {
        this.longs = data().deepCopy(fields()[5].schema(), other.longs);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.floats)) {
        this.floats = data().deepCopy(fields()[6].schema(), other.floats);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.doubles)) {
        this.doubles = data().deepCopy(fields()[7].schema(), other.doubles);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.bytes)) {
        this.bytes = data().deepCopy(fields()[8].schema(), other.bytes);
        fieldSetFlags()[8] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public com.ginema.avro.SensitiveDataHolder2.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public com.ginema.avro.SensitiveDataHolder2.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'domain' field */
    public java.lang.Integer getDomain() {
      return domain;
    }
    
    /** Sets the value of the 'domain' field */
    public com.ginema.avro.SensitiveDataHolder2.Builder setDomain(java.lang.Integer value) {
      validate(fields()[1], value);
      this.domain = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'domain' field has been set */
    public boolean hasDomain() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'domain' field */
    public com.ginema.avro.SensitiveDataHolder2.Builder clearDomain() {
      domain = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'dates' field */
    public java.util.Map<java.lang.CharSequence,com.ginema.avro.DateEntry> getDates() {
      return dates;
    }
    
    /** Sets the value of the 'dates' field */
    public com.ginema.avro.SensitiveDataHolder2.Builder setDates(java.util.Map<java.lang.CharSequence,com.ginema.avro.DateEntry> value) {
      validate(fields()[2], value);
      this.dates = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'dates' field has been set */
    public boolean hasDates() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'dates' field */
    public com.ginema.avro.SensitiveDataHolder2.Builder clearDates() {
      dates = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'strings' field */
    public java.util.Map<java.lang.CharSequence,com.ginema.avro.StringEntry> getStrings() {
      return strings;
    }
    
    /** Sets the value of the 'strings' field */
    public com.ginema.avro.SensitiveDataHolder2.Builder setStrings(java.util.Map<java.lang.CharSequence,com.ginema.avro.StringEntry> value) {
      validate(fields()[3], value);
      this.strings = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'strings' field has been set */
    public boolean hasStrings() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'strings' field */
    public com.ginema.avro.SensitiveDataHolder2.Builder clearStrings() {
      strings = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'booleans' field */
    public java.util.Map<java.lang.CharSequence,com.ginema.avro.BooleanEntry> getBooleans() {
      return booleans;
    }
    
    /** Sets the value of the 'booleans' field */
    public com.ginema.avro.SensitiveDataHolder2.Builder setBooleans(java.util.Map<java.lang.CharSequence,com.ginema.avro.BooleanEntry> value) {
      validate(fields()[4], value);
      this.booleans = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'booleans' field has been set */
    public boolean hasBooleans() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'booleans' field */
    public com.ginema.avro.SensitiveDataHolder2.Builder clearBooleans() {
      booleans = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'longs' field */
    public java.util.Map<java.lang.CharSequence,com.ginema.avro.LongEntry> getLongs() {
      return longs;
    }
    
    /** Sets the value of the 'longs' field */
    public com.ginema.avro.SensitiveDataHolder2.Builder setLongs(java.util.Map<java.lang.CharSequence,com.ginema.avro.LongEntry> value) {
      validate(fields()[5], value);
      this.longs = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'longs' field has been set */
    public boolean hasLongs() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'longs' field */
    public com.ginema.avro.SensitiveDataHolder2.Builder clearLongs() {
      longs = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'floats' field */
    public java.util.Map<java.lang.CharSequence,com.ginema.avro.FloatEntry> getFloats() {
      return floats;
    }
    
    /** Sets the value of the 'floats' field */
    public com.ginema.avro.SensitiveDataHolder2.Builder setFloats(java.util.Map<java.lang.CharSequence,com.ginema.avro.FloatEntry> value) {
      validate(fields()[6], value);
      this.floats = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'floats' field has been set */
    public boolean hasFloats() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'floats' field */
    public com.ginema.avro.SensitiveDataHolder2.Builder clearFloats() {
      floats = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'doubles' field */
    public java.util.Map<java.lang.CharSequence,com.ginema.avro.DoubleEntry> getDoubles() {
      return doubles;
    }
    
    /** Sets the value of the 'doubles' field */
    public com.ginema.avro.SensitiveDataHolder2.Builder setDoubles(java.util.Map<java.lang.CharSequence,com.ginema.avro.DoubleEntry> value) {
      validate(fields()[7], value);
      this.doubles = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'doubles' field has been set */
    public boolean hasDoubles() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'doubles' field */
    public com.ginema.avro.SensitiveDataHolder2.Builder clearDoubles() {
      doubles = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'bytes' field */
    public java.util.Map<java.lang.CharSequence,com.ginema.avro.BytesEntry> getBytes() {
      return bytes;
    }
    
    /** Sets the value of the 'bytes' field */
    public com.ginema.avro.SensitiveDataHolder2.Builder setBytes(java.util.Map<java.lang.CharSequence,com.ginema.avro.BytesEntry> value) {
      validate(fields()[8], value);
      this.bytes = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'bytes' field has been set */
    public boolean hasBytes() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'bytes' field */
    public com.ginema.avro.SensitiveDataHolder2.Builder clearBytes() {
      bytes = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public SensitiveDataHolder2 build() {
      try {
        SensitiveDataHolder2 record = new SensitiveDataHolder2();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.domain = fieldSetFlags()[1] ? this.domain : (java.lang.Integer) defaultValue(fields()[1]);
        record.dates = fieldSetFlags()[2] ? this.dates : (java.util.Map<java.lang.CharSequence,com.ginema.avro.DateEntry>) defaultValue(fields()[2]);
        record.strings = fieldSetFlags()[3] ? this.strings : (java.util.Map<java.lang.CharSequence,com.ginema.avro.StringEntry>) defaultValue(fields()[3]);
        record.booleans = fieldSetFlags()[4] ? this.booleans : (java.util.Map<java.lang.CharSequence,com.ginema.avro.BooleanEntry>) defaultValue(fields()[4]);
        record.longs = fieldSetFlags()[5] ? this.longs : (java.util.Map<java.lang.CharSequence,com.ginema.avro.LongEntry>) defaultValue(fields()[5]);
        record.floats = fieldSetFlags()[6] ? this.floats : (java.util.Map<java.lang.CharSequence,com.ginema.avro.FloatEntry>) defaultValue(fields()[6]);
        record.doubles = fieldSetFlags()[7] ? this.doubles : (java.util.Map<java.lang.CharSequence,com.ginema.avro.DoubleEntry>) defaultValue(fields()[7]);
        record.bytes = fieldSetFlags()[8] ? this.bytes : (java.util.Map<java.lang.CharSequence,com.ginema.avro.BytesEntry>) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
